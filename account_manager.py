#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π.
"""

import argparse
import json
import sys
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

from src.auto_poster import SocialMediaAutoPoster
from src.logger import get_logger


def main():
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π"
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    status_parser = subparsers.add_parser('status', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤')
    status_parser.add_argument('--platform', choices=['instagram', 'tiktok', 'youtube'], 
                              help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É')
    status_parser.add_argument('--json', action='store_true', help='–í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    auth_parser = subparsers.add_parser('authorize', help='–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã')
    auth_parser.add_argument('--platform', choices=['instagram', 'tiktok', 'youtube'], 
                            help='–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã')
    auth_parser.add_argument('--account', help='–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç')
    auth_parser.add_argument('--all', action='store_true', help='–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã')
    auth_parser.add_argument('--no-browser', action='store_true', help='–ù–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    refresh_parser = subparsers.add_parser('refresh', help='–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤')
    refresh_parser.add_argument('--platform', choices=['instagram', 'tiktok', 'youtube'], 
                               help='–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã')
    refresh_parser.add_argument('--account', help='–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    validate_parser = subparsers.add_parser('validate', help='–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã')
    validate_parser.add_argument('--platform', choices=['instagram', 'tiktok', 'youtube'], 
                                help='–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã')
    validate_parser.add_argument('--json', action='store_true', help='–í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    url_parser = subparsers.add_parser('auth-url', help='–ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    url_parser.add_argument('platform', choices=['instagram', 'tiktok', 'youtube'], 
                           help='–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞')
    url_parser.add_argument('account', help='–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
    token_parser = subparsers.add_parser('add-token', help='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é')
    token_parser.add_argument('platform', choices=['instagram', 'tiktok', 'youtube'], 
                             help='–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞')
    token_parser.add_argument('account', help='–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞')
    token_parser.add_argument('access_token', help='–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞')
    token_parser.add_argument('--refresh-token', help='–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    token_parser.add_argument('--expires-in', type=int, help='–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    remove_parser = subparsers.add_parser('remove-token', help='–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞')
    remove_parser.add_argument('platform', choices=['instagram', 'tiktok', 'youtube'], 
                              help='–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞')
    remove_parser.add_argument('account', help='–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
    info_parser = subparsers.add_parser('token-info', help='–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ')
    info_parser.add_argument('platform', choices=['instagram', 'tiktok', 'youtube'], 
                            help='–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞')
    info_parser.add_argument('account', help='–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    add_channel_parser = subparsers.add_parser('add-channel', help='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π YouTube –∫–∞–Ω–∞–ª')
    add_channel_parser.add_argument('name', help='–ò–º—è –∫–∞–Ω–∞–ª–∞ –≤ —Å–∏—Å—Ç–µ–º–µ')
    add_channel_parser.add_argument('channel_id', help='ID YouTube –∫–∞–Ω–∞–ª–∞')
    add_channel_parser.add_argument('--auto-auth', action='store_true', 
                                   help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ YAML –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    migrate_parser = subparsers.add_parser('migrate', help='–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ YAML –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    migrate_parser.add_argument('--dry-run', action='store_true', 
                               help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db_parser = subparsers.add_parser('db', help='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤')
    db_subparsers = db_parser.add_subparsers(dest='db_command', help='–ö–æ–º–∞–Ω–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    
    # db list - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ –ë–î
    db_list_parser = db_subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    db_list_parser.add_argument('--enabled-only', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã')
    
    # db add - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –ë–î
    db_add_parser = db_subparsers.add_parser('add', help='–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    db_add_parser.add_argument('name', help='–ò–º—è –∫–∞–Ω–∞–ª–∞')
    db_add_parser.add_argument('channel_id', help='ID YouTube –∫–∞–Ω–∞–ª–∞')
    db_add_parser.add_argument('--client-id', help='OAuth Client ID (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ .env)')
    db_add_parser.add_argument('--client-secret', help='OAuth Client Secret (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ .env)')
    db_add_parser.add_argument('--disabled', action='store_true', help='–î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π')
    
    # db remove - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –ë–î
    db_remove_parser = db_subparsers.add_parser('remove', help='–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    db_remove_parser.add_argument('name', help='–ò–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
    info_parser.add_argument('--json', action='store_true', help='–í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä
    try:
        auto_poster = SocialMediaAutoPoster()
        logger = get_logger("account_manager")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
    try:
        if args.command == 'status':
            handle_status(auto_poster, args)
        elif args.command == 'authorize':
            handle_authorize(auto_poster, args)
        elif args.command == 'refresh':
            handle_refresh(auto_poster, args)
        elif args.command == 'validate':
            handle_validate(auto_poster, args)
        elif args.command == 'auth-url':
            handle_auth_url(auto_poster, args)
        elif args.command == 'add-token':
            handle_add_token(auto_poster, args)
        elif args.command == 'remove-token':
            handle_remove_token(auto_poster, args)
        elif args.command == 'token-info':
            handle_token_info(auto_poster, args)
        elif args.command == 'add-channel':
            handle_add_channel(auto_poster, args)
        elif args.command == 'migrate':
            handle_migrate(auto_poster, args)
        elif args.command == 'db':
            handle_db_command(auto_poster, args)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")


def handle_status(auto_poster: SocialMediaAutoPoster, args):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É status."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    
    system_status = auto_poster.get_system_status()
    account_status = system_status.get('account_status', {})
    token_status = system_status.get('token_status', {})
    
    if args.json:
        print(json.dumps({
            'account_status': account_status,
            'token_status': token_status
        }, indent=2, ensure_ascii=False))
        return
    
    platforms = [args.platform] if args.platform else ['instagram', 'tiktok', 'youtube']
    
    for platform in platforms:
        platform_accounts = account_status.get('platforms', {}).get(platform, {})
        platform_tokens = token_status.get('platforms', {}).get(platform, {})
        
        print(f"\nüì± {platform.upper()}:")
        print(f"   –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {platform_accounts.get('total', 0)}")
        print(f"   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö: {platform_accounts.get('authorized', 0)}")
        
        if platform_tokens:
            print(f"   –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {platform_tokens.get('valid', 0)}")
            print(f"   –ò—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {platform_tokens.get('expired', 0)}")
        
        accounts = platform_accounts.get('accounts', {})
        for account_name, account_info in accounts.items():
            status_icon = "‚úÖ" if account_info.get('authorized') else "‚ùå"
            token_icon = "üü¢" if account_info.get('token_valid') else "üî¥"
            
            print(f"   {status_icon} {account_name}")
            if account_info.get('expires_at'):
                print(f"      –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç: {account_info['expires_at']}")
            if account_info.get('last_refreshed'):
                print(f"      –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {account_info['last_refreshed']}")


def handle_authorize(auto_poster: SocialMediaAutoPoster, args):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É authorize."""
    if args.all:
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        results = auto_poster.authorize_all_accounts(args.platform)
        
        for platform, accounts in results.items():
            print(f"\nüì± {platform.upper()}:")
            for account_name, result in accounts.items():
                if result.get('success'):
                    print(f"   ‚úÖ {account_name} - —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                else:
                    print(f"   ‚ùå {account_name} - –æ—à–∏–±–∫–∞: {result.get('error')}")
                    
    elif args.platform and args.account:
        print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {args.platform}:{args.account}...")
        result = auto_poster.authorize_account(
            platform=args.platform,
            account_name=args.account,
            auto_open_browser=not args.no_browser
        )
        
        if result.get('success'):
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {args.platform}:{args.account} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            if result.get('expires_in'):
                print(f"   –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω {result['expires_in']} —Å–µ–∫—É–Ω–¥")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {result.get('error')}")
            
    else:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ --all –∏–ª–∏ --platform –∏ --account")


def handle_refresh(auto_poster: SocialMediaAutoPoster, args):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É refresh."""
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")
    
    results = auto_poster.refresh_account_tokens(args.platform, args.account)
    
    for account_key, success in results.items():
        if success:
            print(f"‚úÖ {account_key} - —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            print(f"‚ùå {account_key} - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")


def handle_validate(auto_poster: SocialMediaAutoPoster, args):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É validate."""
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    
    results = auto_poster.validate_all_accounts_extended()
    
    if args.json:
        print(json.dumps(results, indent=2, ensure_ascii=False))
        return
    
    platforms = [args.platform] if args.platform else results.keys()
    
    for platform in platforms:
        if platform not in results:
            continue
            
        print(f"\nüì± {platform.upper()}:")
        accounts = results[platform]
        
        for account_name, account_info in accounts.items():
            if account_info.get('valid'):
                print(f"   ‚úÖ {account_name} - –≤–∞–ª–∏–¥–µ–Ω")
            else:
                print(f"   ‚ùå {account_name} - –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
                if account_info.get('error'):
                    print(f"      –û—à–∏–±–∫–∞: {account_info['error']}")
                
                print(f"      –í–∫–ª—é—á–µ–Ω: {account_info.get('enabled', False)}")
                print(f"      –ï—Å—Ç—å —Ç–æ–∫–µ–Ω: {account_info.get('has_token', False)}")
                print(f"      –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: {account_info.get('token_valid', False)}")


def handle_auth_url(auto_poster: SocialMediaAutoPoster, args):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É auth-url."""
    print(f"üîó –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {args.platform}:{args.account}...")
    
    url = auto_poster.get_account_authorization_url(args.platform, args.account)
    
    if url:
        print(f"‚úÖ URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
        print(f"   {url}")
        print("\nüìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")


def handle_add_token(auto_poster: SocialMediaAutoPoster, args):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É add-token."""
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {args.platform}:{args.account}...")
    
    success = auto_poster.add_account_token(
        platform=args.platform,
        account_name=args.account,
        access_token=args.access_token,
        refresh_token=args.refresh_token,
        expires_in=args.expires_in
    )
    
    if success:
        print(f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {args.platform}:{args.account}")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è {args.platform}:{args.account}")


def handle_remove_token(auto_poster: SocialMediaAutoPoster, args):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É remove-token."""
    print(f"‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {args.platform}:{args.account}...")
    
    success = auto_poster.remove_account_token(args.platform, args.account)
    
    if success:
        print(f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –¥–ª—è {args.platform}:{args.account}")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è {args.platform}:{args.account}")


def handle_token_info(auto_poster: SocialMediaAutoPoster, args):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É token-info."""
    print(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ {args.platform}:{args.account}...")
    
    info = auto_poster.get_account_token_info(args.platform, args.account)
    
    if not info:
        print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {args.platform}:{args.account}")
        return
    
    if args.json:
        print(json.dumps(info, indent=2, ensure_ascii=False))
        return
    
    print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:")
    print(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {info['platform']}")
    print(f"   –ê–∫–∫–∞—É–Ω—Ç: {info['account_name']}")
    print(f"   –ï—Å—Ç—å refresh —Ç–æ–∫–µ–Ω: {info['has_refresh_token']}")
    print(f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {info['expires_at'] or '–ù–∏–∫–æ–≥–¥–∞'}")
    print(f"   –°–æ–∑–¥–∞–Ω: {info['created_at'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {info['last_refreshed'] or '–ù–∏–∫–æ–≥–¥–∞'}")
    print(f"   –ò—Å—Ç–µ–∫: {'–î–∞' if info['is_expired'] else '–ù–µ—Ç'}")
    
    if info.get('scope'):
        print(f"   –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {info['scope']}")


def handle_add_channel(auto_poster: SocialMediaAutoPoster, args):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É add-channel."""
    from src.database_config_loader import DatabaseConfigLoader
    
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ YouTube –∫–∞–Ω–∞–ª–∞: {args.name}")
    
    # –°–æ–∑–¥–∞–µ–º DatabaseConfigLoader –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    db_loader = DatabaseConfigLoader()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = db_loader.add_youtube_channel(
        name=args.name,
        channel_id=args.channel_id
    )
    
    if success:
        print(f"‚úÖ –ö–∞–Ω–∞–ª '{args.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        
        if args.auto_auth:
            print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ '{args.name}'...")
            auth_result = auto_poster.oauth_manager.authorize_account("youtube", args.name)
            if auth_result.get('success'):
                print(f"‚úÖ –ö–∞–Ω–∞–ª '{args.name}' —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_result.get('error')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ö–∞–Ω–∞–ª '{args.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def handle_migrate(auto_poster: SocialMediaAutoPoster, args):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É migrate."""
    from src.database_config_loader import DatabaseConfigLoader
    
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ YAML –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    db_loader = DatabaseConfigLoader()
    
    if args.dry_run:
        print("üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        yaml_config = auto_poster.config
        youtube_accounts = yaml_config.get('accounts', {}).get('youtube', [])
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(youtube_accounts)} –∫–∞–Ω–∞–ª–æ–≤ –≤ YAML:")
        for account in youtube_accounts:
            name = account.get('name', 'Unknown')
            channel_id = account.get('channel_id', 'Unknown')
            enabled = account.get('enabled', True)
            status = "‚úÖ" if enabled else "‚ùå"
            print(f"   {status} {name} ({channel_id})")
        
        print("\nüí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --dry-run")
    else:
        migrated_count = db_loader.migrate_from_yaml()
        print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ YAML –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        if migrated_count > 0:
            print("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏")
            print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python3 account_manager.py db list")


def handle_db_command(auto_poster: SocialMediaAutoPoster, args):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    from src.database_config_loader import DatabaseConfigLoader
    
    db_loader = DatabaseConfigLoader()
    
    if args.db_command == 'list':
        print("üì∫ –ö–∞–Ω–∞–ª—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        status = db_loader.get_channel_status()
        
        if status['total'] == 0:
            print("üì≠ –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"   –í—Å–µ–≥–æ: {status['total']}")
        print(f"   –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {status['enabled']}")
        print(f"   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö: {status['authorized']}")
        print(f"   –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {status['valid_tokens']}")
        print(f"   –ò—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {status['expired_tokens']}")
        print()
        
        for name, info in status['channels'].items():
            if args.enabled_only and not info['enabled']:
                continue
                
            status_icon = "‚úÖ" if info['enabled'] else "‚ùå"
            auth_icon = "üîë" if info['authorized'] else "üîí"
            token_icon = "üü¢" if info['token_valid'] else "üî¥"
            
            print(f"   {status_icon} {auth_icon} {token_icon} {name}")
            if info['expires_at']:
                print(f"      –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç: {info['expires_at']}")
            if info['created_at']:
                print(f"      –°–æ–∑–¥–∞–Ω: {info['created_at']}")
    
    elif args.db_command == 'add':
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ '{args.name}' –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        success = db_loader.add_youtube_channel(
            name=args.name,
            channel_id=args.channel_id,
            client_id=args.client_id,
            client_secret=args.client_secret,
            enabled=not args.disabled
        )
        
        if success:
            print(f"‚úÖ –ö–∞–Ω–∞–ª '{args.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: –ö–∞–Ω–∞–ª '{args.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    elif args.db_command == 'remove':
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ '{args.name}' –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        success = db_loader.remove_youtube_channel(args.name)
        
        if success:
            print(f"‚úÖ –ö–∞–Ω–∞–ª '{args.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: –ö–∞–Ω–∞–ª '{args.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")


if __name__ == "__main__":
    main()
