#!/usr/bin/env python3
"""
Migration script to move YouTube channels from config.yaml to database.
"""

import sys
import yaml
from pathlib import Path

# Add src directory to path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from src.database import get_database


def migrate_channels():
    """Migrate channels from config.yaml to database."""
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ config.yaml –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # Load config
    try:
        with open('config.yaml', 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # Get YouTube accounts
    youtube_accounts = config.get('accounts', {}).get('youtube', [])
    if not youtube_accounts:
        print("üì≠ YouTube –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ config.yaml")
        return False
    
    # Initialize database
    db = get_database()
    
    migrated_count = 0
    skipped_count = 0
    
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(youtube_accounts)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:")
    
    for account in youtube_accounts:
        name = account.get('name')
        channel_id = account.get('channel_id', '')
        client_id = account.get('client_id', '')
        client_secret = account.get('client_secret', '')
        enabled = account.get('enabled', True)
        
        print(f"\n  üì∫ {name}:")
        print(f"     ID: {channel_id}")
        print(f"     Client ID: {client_id[:20]}..." if client_id else "     Client ID: –ù–µ —É–∫–∞–∑–∞–Ω")
        print(f"     –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        
        # Check if channel already exists
        existing = db.get_channel(name)
        if existing:
            print(f"     ‚ö†Ô∏è –ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            skipped_count += 1
            continue
        
        # Add to database
        success = db.add_channel(name, channel_id, client_id, client_secret, enabled)
        if success:
            print(f"     ‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")
            migrated_count += 1
        else:
            print(f"     ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ë–î")
            skipped_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:")
    print(f"   ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count}")
    print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
    print(f"   üìã –í—Å–µ–≥–æ: {len(youtube_accounts)}")
    
    if migrated_count > 0:
        print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
        print(f"   1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å youtube_db_manager.py –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏")
        print(f"   2. –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
        print(f"   3. –£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω–∞–º–∏ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    return migrated_count > 0


def show_next_steps():
    """Show next steps after migration."""
    print(f"\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print(f"   1. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ credentials:")
    print(f"      YOUTUBE_TEASERA_CLIENT_ID=–≤–∞—à_client_id")
    print(f"      YOUTUBE_TEASERA_CLIENT_SECRET=–≤–∞—à_client_secret")
    print(f"      YOUTUBE_ANDREW_CLIENT_ID=–≤–∞—à_client_id")
    print(f"      YOUTUBE_ANDREW_CLIENT_SECRET=–≤–∞—à_client_secret")
    print(f"   2. –ü–æ–º–µ—Å—Ç–∏—Ç–µ credentials.json –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞")
    print(f"   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:")
    print(f"      python3 youtube_db_manager.py list")
    print(f"   4. –ü—É–±–ª–∏–∫—É–π—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤:")
    print(f"      python3 main.py post --platforms youtube --accounts 'Teasera,Andrew Garle'")


def main():
    """Main migration function."""
    print("üöÄ YouTube Database Migration Tool")
    print("=" * 50)
    
    try:
        success = migrate_channels()
        
        if success:
            show_next_steps()
        else:
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()
