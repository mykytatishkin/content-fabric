#!/usr/bin/env python3
"""
YouTube Database Manager - CLI for managing YouTube channels in database.
"""

import argparse
import sys
import json
from pathlib import Path
from datetime import datetime

# Add src directory to path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from src.database import get_database, YouTubeChannel


def cmd_add_channel(args):
    """Add a new YouTube channel."""
    db = get_database()
    
    success = db.add_channel(
        name=args.name,
        channel_id=args.channel_id,
        client_id=args.client_id,
        client_secret=args.client_secret,
        enabled=not args.disabled
    )
    
    if success:
        print(f"‚úÖ –ö–∞–Ω–∞–ª '{args.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ö–∞–Ω–∞–ª '{args.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def cmd_list_channels(args):
    """List all YouTube channels."""
    db = get_database()
    channels = db.get_all_channels(enabled_only=args.enabled_only)
    
    if not channels:
        print("üì≠ YouTube –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print("üì∫ YouTube –∫–∞–Ω–∞–ª—ã:")
    for i, channel in enumerate(channels, 1):
        status = "‚úÖ" if channel.enabled else "‚ùå"
        token_status = "üîë" if channel.access_token else "üîí"
        expired = "‚ö†Ô∏è" if db.is_token_expired(channel.name) else "‚úÖ"
        
        print(f"  {i}. {status} {channel.name} (ID: {channel.channel_id})")
        print(f"     –¢–æ–∫–µ–Ω: {token_status} {expired}")
        if channel.token_expires_at:
            print(f"     –ò—Å—Ç–µ–∫–∞–µ—Ç: {channel.token_expires_at}")


def cmd_enable_channel(args):
    """Enable a channel."""
    db = get_database()
    if db.enable_channel(args.name):
        print(f"‚úÖ –ö–∞–Ω–∞–ª '{args.name}' –≤–∫–ª—é—á–µ–Ω")
    else:
        print(f"‚ùå –ö–∞–Ω–∞–ª '{args.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")


def cmd_disable_channel(args):
    """Disable a channel."""
    db = get_database()
    if db.disable_channel(args.name):
        print(f"‚úÖ –ö–∞–Ω–∞–ª '{args.name}' –æ—Ç–∫–ª—é—á–µ–Ω")
    else:
        print(f"‚ùå –ö–∞–Ω–∞–ª '{args.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")


def cmd_delete_channel(args):
    """Delete a channel."""
    db = get_database()
    if db.delete_channel(args.name):
        print(f"‚úÖ –ö–∞–Ω–∞–ª '{args.name}' —É–¥–∞–ª–µ–Ω")
    else:
        print(f"‚ùå –ö–∞–Ω–∞–ª '{args.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")


def cmd_show_channel(args):
    """Show detailed channel information."""
    db = get_database()
    channel = db.get_channel(args.name)
    
    if not channel:
        print(f"‚ùå –ö–∞–Ω–∞–ª '{args.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üì∫ –ö–∞–Ω–∞–ª: {channel.name}")
    print(f"   ID: {channel.channel_id}")
    print(f"   Client ID: {channel.client_id[:20]}...")
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if channel.enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
    print(f"   –¢–æ–∫–µ–Ω: {'üîë –ï—Å—Ç—å' if channel.access_token else 'üîí –ù–µ—Ç'}")
    print(f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {channel.token_expires_at or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}")
    print(f"   –°–æ–∑–¥–∞–Ω: {channel.created_at}")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω: {channel.updated_at}")


def cmd_export_config(args):
    """Export configuration to config.yaml format."""
    db = get_database()
    config = db.export_config()
    
    if args.output:
        with open(args.output, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {args.output}")
    else:
        print(json.dumps(config, indent=2, ensure_ascii=False))


def cmd_import_config(args):
    """Import configuration from config.yaml."""
    db = get_database()
    
    with open(args.file, 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    imported = db.import_from_config(config)
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported} –∫–∞–Ω–∞–ª–æ–≤")


def cmd_check_tokens(args):
    """Check token status for all channels."""
    db = get_database()
    channels = db.get_all_channels(enabled_only=True)
    
    print("üîë –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–æ–≤:")
    for channel in channels:
        if db.is_token_expired(channel.name):
            print(f"  ‚ö†Ô∏è {channel.name}: –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
        else:
            print(f"  ‚úÖ {channel.name}: –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")


def cmd_setup_demo():
    """Setup demo channels."""
    db = get_database()
    
    # Add demo channels
    demo_channels = [
        {
            'name': 'Teasera',
            'channel_id': 'teasera-git',
            'client_id': '${YOUTUBE_TEASERA_CLIENT_ID}',
            'client_secret': '${YOUTUBE_TEASERA_CLIENT_SECRET}',
            'enabled': True
        },
        {
            'name': 'Andrew Garle',
            'channel_id': '@AndrewGarle',
            'client_id': '${YOUTUBE_ANDREW_CLIENT_ID}',
            'client_secret': '${YOUTUBE_ANDREW_CLIENT_SECRET}',
            'enabled': True
        }
    ]
    
    added_count = 0
    for channel_data in demo_channels:
        if db.add_channel(**channel_data):
            added_count += 1
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –¥–µ–º–æ –∫–∞–Ω–∞–ª–æ–≤")
    print("üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ credentials!")


def main():
    parser = argparse.ArgumentParser(
        description="YouTube Database Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ —á–µ—Ä–µ–∑ –ë–î"
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # Add channel command
    add_parser = subparsers.add_parser('add', help='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª')
    add_parser.add_argument('name', help='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞')
    add_parser.add_argument('--channel-id', required=True, help='ID –∫–∞–Ω–∞–ª–∞')
    add_parser.add_argument('--client-id', required=True, help='Client ID')
    add_parser.add_argument('--client-secret', required=True, help='Client Secret')
    add_parser.add_argument('--disabled', action='store_true', help='–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º')
    
    # List channels command
    list_parser = subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤')
    list_parser.add_argument('--enabled-only', action='store_true', help='–¢–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã')
    
    # Enable/disable commands
    enable_parser = subparsers.add_parser('enable', help='–í–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª')
    enable_parser.add_argument('name', help='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞')
    
    disable_parser = subparsers.add_parser('disable', help='–û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª')
    disable_parser.add_argument('name', help='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞')
    
    # Delete command
    delete_parser = subparsers.add_parser('delete', help='–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª')
    delete_parser.add_argument('name', help='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞')
    
    # Show channel command
    show_parser = subparsers.add_parser('show', help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ')
    show_parser.add_argument('name', help='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞')
    
    # Export/import commands
    export_parser = subparsers.add_parser('export', help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
    export_parser.add_argument('--output', help='–§–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
    
    import_parser = subparsers.add_parser('import', help='–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
    import_parser.add_argument('file', help='–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    
    # Check tokens command
    subparsers.add_parser('check-tokens', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–æ–≤')
    
    # Setup demo command
    subparsers.add_parser('setup-demo', help='–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–µ–º–æ –∫–∞–Ω–∞–ª—ã')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # Route to command handler
    command_handlers = {
        'add': cmd_add_channel,
        'list': cmd_list_channels,
        'enable': cmd_enable_channel,
        'disable': cmd_disable_channel,
        'delete': cmd_delete_channel,
        'show': cmd_show_channel,
        'export': cmd_export_config,
        'import': cmd_import_config,
        'check-tokens': cmd_check_tokens,
        'setup-demo': cmd_setup_demo
    }
    
    handler = command_handlers.get(args.command)
    if handler:
        handler(args)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")


if __name__ == '__main__':
    main()
